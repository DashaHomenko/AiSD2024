void insert_tree(TreeNode** t, int x, TreeNode* parent = nullptr) {
    if (*t == nullptr) {
        // Создаем новый узел, если текущий узел пуст
        TreeNode* p = new TreeNode(x, parent); // Используем конструктор TreeNode
        *t = p;
        return;
    }

    if (x < (*t)->item) {
        // Вставляем в левое поддерево
        insert_tree(&((*t)->left), x, *t);
    } else {
        // Вставляем в правое поддерево
        insert_tree(&((*t)->right), x, *t);
    }
}


/* В этом коде:

1. Мы используем new для динамического выделения памяти под новый узел, что является стандартным способом в C++.
2. Мы используем конструктор TreeNode, который принимает значение узла и указатель на родительский узел. Конструктор может быть расширен для инициализации левого и правого дочерних узлов, если это необходимо.
3. Мы используем nullptr вместо NULL, что является стандартным в C++.
4. Функция insert_tree рекурсивно вставляет новый узел в двоичное дерево поиска.

Этот код на C++ эквивалентен приведённому вами коду на C, но использует возможности C++ для более удобной работы с динамической памятью и структурами. */
