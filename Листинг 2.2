#include <iostream>
#include <vector>

void swap(int& a, int& b) {
    int temp = a;
    a = b;
    b = temp;
}

void insertionSort(std::vector<int>& s) {
    int n = s.size();
    for (int i = 1; i < n; i++) {
        int j = i;
        while ((j > 0) && (s[j] < s[j - 1])) {
            swap(s[j], s[j - 1]);
            j = j - 1;
        }
    }
}

int main() {
    std::vector<int> arr = {5, 2, 9, 1, 5, 6};
    insertionSort(arr);
    for (int i : arr) {
        std::cout << i << " ";
    }
    return 0;
}


/* В этом коде:

1. Используется std::vector<int> для хранения массива, что является более современным и безопасным способом работы с массивами в C++.
2. Функция swap принимает параметры по ссылке, что позволяет изменять значения непосредственно в массиве.
3. В main создается вектор arr, который сортируется с помощью функции insertionSort, а затем выводится на экран.

Этот код демонстрирует базовую реализацию сортировки вставками на C++ с использованием стандартных возможностей языка.

Строка std::vector<int> arr = {5, 2, 9, 1, 5, 6}; в C++ означает создание и инициализацию вектора (динамического массива) целых чисел с именем arr. Давайте разберем эту строку подробнее:

1. std::vector<int>:
   - std::vector — это шаблонный класс из стандартной библиотеки C++, который представляет собой динамический массив. Он может изменять свой размер во время выполнения программы.
   - <int> указывает, что вектор будет хранить элементы типа int (целые числа).

2. arr:
   - Это имя переменной, которая представляет собой вектор.

3. = {5, 2, 9, 1, 5, 6};:
   - Это инициализация вектора arr с помощью списка инициализации. Вектор будет содержать элементы 5, 2, 9, 1, 5, 6 в указанном порядке.
   - В данном случае, вектор arr будет содержать 6 элементов: 5, 2, 9, 1, 5 и 6.

### Пример использования:
После этой строки вектор arr можно использовать в программе, например, для сортировки, вывода на экран или других операций. 
В коде, который я предоставил ранее, этот вектор передается в функцию insertionSort для сортировки, а затем его элементы выводятся на экран.

for (int i : arr) {
    std::cout << i << " ";
}
Этот цикл выведет элементы вектора arr после сортировки. Если вектор не был отсортирован, вывод будет 5 2 9 1 5 6. После сортировки вывод будет 1 2 5 5 6 9. */
