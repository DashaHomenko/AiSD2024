#include <iostream>
using namespace std;

void selection_sort(int arr[], int n) {
    for (int i = 0; i < n - 1; i++) {
        int min = i;
        for (int j = i + 1; j < n; j++) {
            if (arr[j] < arr[min]) {
                min = j;
            }
        }
        swap(arr[i], arr[min]);
    }
}

int main() {
    int arr[] = {64, 25, 12, 22, 11};
    int n = sizeof(arr) / sizeof(arr[0]);

    selection_sort(arr, n);

    cout << "Отсортированный массив: ";
    for (int i = 0; i < n; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;

    return 0;
}


/*Этот код реализует алгоритм сортировки выбором (Selection Sort). Он принимает массив и его размер, затем сортирует его по возрастанию. 
В main() создается массив, вызывается функция сортировки и затем выводится отсортированный массив.
void selection_sort(int arr[], int n) {
- Определение функции selection_sort, которая принимает два аргумента: массив целых чисел arr[] и его размер n. Эта функция будет использоваться для выполнения сортировки выбором.

    for (int i = 0; i < n - 1; i++) {
- Начало цикла for, который итерируется по элементам массива от 0 до n-1. Этот внешний цикл отвечает за текущую позицию, на которую мы собираемся поставить элемент.

        int min = i;
- Здесь объявляется переменная min и инициализируется значением текущего индекса i. Эта переменная будет хранить индекс минимального элемента, найденного на текущей итерации.

        for (int j = i + 1; j < n; j++) {
- Начало внутреннего цикла for, который проходит по все значения массива от i + 1 до n. Этот цикл ищет индекс наименьшего элемента в оставшейся части массива.

            if (arr[j] < arr[min]) {
- Условие, проверяющее, является ли текущий элемент arr[j] меньшим, чем элемент arr[min] (текущий минимальный элемент). Если это так, то нужно обновить индекс минимального элемента.

                min = j;
- Если условие выполняется, здесь обновляется min, чтобы он теперь указывал на индекс j, который содержит новый минимальный элемент.

        swap(arr[i], arr[min]);
- Эта строка меняет местами элемент с индексом i (текущий элемент) и элемент с индексом min (найденный минимальный элемент). Функция swap обменяет их значения, что поместит текущий минимальный элемент на правильное место в отсортированном массиве.


int main() {
- Начало главной функции main, с которой начинается выполнение программы.

    int arr[] = {64, 25, 12, 22, 11};
- Объявление и инициализация массива arr с некоторыми целыми числами, которые будут отсортированы.

    int n = sizeof(arr) / sizeof(arr[0]);
- Определение переменной n, которая содержит количество элементов в массиве. sizeof(arr) дает размер всего массива в байтах, а sizeof(arr[0]) - размер одного элемента. Деление этих величин дает количество элементов в массиве.

    selection_sort(arr, n);
- Вызов функции selection_sort, передавая ей массив arr и его размер n, чтобы отсортировать массив.

    cout << "Отсортированный массив: ";
- Вывод строки "Отсортированный массив: " на экран, чтобы обозначить, что далее будет следовать отсортированный массив.

    for (int i = 0; i < n; i++) {
- Начало цикла for, который проходит по всем элементам отсортированного массива.

        cout << arr[i] << " ";
- Для каждого элемента массива выводится его значение в консоль. Между элементами добавляется пробел для удобства чтения.


    cout << endl;
- Печатает символ новой строки, чтобы после вывода массива установка курсора была на новой строке.

    return 0;
- Возврат 0 из функции main, указывающий на успешное выполнение программы.

В итоге, этот код реализует алгоритм сортировки выбором и выводит отсортированный массив чисел на экран */
